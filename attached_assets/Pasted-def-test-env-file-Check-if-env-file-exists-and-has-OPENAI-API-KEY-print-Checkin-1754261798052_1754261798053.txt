def test_env_file():
    """Check if .env file exists and has OPENAI_API_KEY"""
    print("Checking .env file...")
    if Path('.env').exists():
        print(".env file found")
        from dotenv import load_dotenv
        load_dotenv()
        api_key = os.getenv("OPENAI_API_KEY")
        if api_key and api_key != 'your_openai_api_key_here':
            print("PASS: OPENAI_API_KEY is set")
            return True
        else:
            print("FAIL: OPENAI_API_KEY not configured correctly")
            return False
    else:
        print("FAIL: .env file not found")
        return False
def test_required_packages():
    """Check if required packages are installed"""
    print("Checking required packages...")
    required = ["openai", "dotenv"]
    all_passed = True
    for pkg in required:
        try:
            importlib.import_module(pkg)
            print(f"PASS: {pkg} is installed")
        except ImportError:
            print(f"FAIL: {pkg} is NOT installed")
            all_passed = False
    return all_passed
def test_fresh_module():
    """Check if fresh.py can generate recipes"""
    print("Testing recipe generation from fresh.py...")
    try:
        from fresh import generate_recipes
        recipes = generate_recipes(
            num_people=2,
            ingredients="tofu, spinach, mushrooms",
            dietary="vegan"
        )
        if isinstance(recipes, list) and len(recipes) >= 3:
            print(f"PASS: Generated {len(recipes)} recipes")
            print(f"First recipe title: {recipes[0].get('title', 'N/A')}")
            return True
        else:
            print("FAIL: Unexpected output from generate_recipes")
            return False
    except Exception as e:
        print(f"FAIL: Error: {e}")
        return False
def main():
    tests = [
        test_python_version,
        test_env_file,
        test_required_packages,
        test_fresh_module
    ]
    results = []
    for test in tests:
        result = test()
        results.append(result)
        print("-" * 50)
    passed = sum(results)
    total = len(results)
    print("\nTest Summary")
    print("=" * 50)
    if passed == total:
        print(f"All tests passed ({passed}/{total})")
    else:
        print(f"{passed}/{total} tests passed")
        print("Please fix the issues above before proceeding.")
if __name__ == "__main__":
    main()
Your project is a recipe generator that uses OpenAI's API to create recipes based on ingredients, number of people, and dietary restrictions. The main files are main.py (entry point) and fresh.py (OpenAI integration), with additional files in the AI_Agent directory for testing and an alternative implementation.